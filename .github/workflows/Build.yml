name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-Windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      working-directory: examples/empty_3D_scene
      run: cmake -B build/ -DCMAKE_BUILD_TYPE=RelWithDebInfo

    - name: Build
      # Build your program with the given configuration
      working-directory: examples/empty_3D_scene
      run: cmake --build build/ --config RelWithDebInfo

  build-Ubuntu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup
      run:
        sudo apt-get update;
        sudo apt-get install libglfw3-dev;
    - name: Configure CMake
      working-directory: examples/empty_3D_scene
      run: cmake -B build/ -DCMAKE_BUILD_TYPE=RelWithDebInfo
    - name: Build
      working-directory: examples/empty_3D_scene/build
      run: make -j4
  build-MacOS:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup
      run:
        brew update;
        brew install glfw;
        brew install pkg-config;
    - name: Configure CMake
      working-directory: examples/empty_3D_scene
      run: cmake -B build/ -DCMAKE_BUILD_TYPE=RelWithDebInfo
    - name: Build
      working-directory: examples/empty_3D_scene/build
      run: make -j4